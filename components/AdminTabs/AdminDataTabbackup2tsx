"use client";
import { useState, useEffect, useMemo } from 'react';
import RosterTable from '../Shared/RosterTable';

interface Props { id: string; }

const ALL_SHIFT_CODES = ['', 'M2','M3','M4','D1','D2','DO','SL','CL','EL','HL'];

export default function AdminDataTab({id}:Props) {
  const [data,setData]=useState<any>(null);
  const [google,setGoogle]=useState<any>(null);
  const [loading,setLoading]=useState(false);
  const [saving,setSaving]=useState(false);

  // Filters
  const [search,setSearch]=useState('');
  const [selectedTeams,setSelectedTeams]=useState<string[]>([]);
  const [viewMode,setViewMode]=useState<'month'|'day'>('month');
  const [dayIndex,setDayIndex]=useState<number>(0);

  async function load() {
    setLoading(true);
    const aRes = await fetch('/api/admin/get-admin-data');
    const gRes = await fetch('/api/admin/get-google-data');
    if (aRes.ok) setData(await aRes.json());
    if (gRes.ok) setGoogle(await gRes.json());
    setLoading(false);
  }

  useEffect(()=>{ load(); },[]);

  async function updateShift(employeeId:string,dateIndex:number,newShift:string) {
    setSaving(true);
    const googleShift = google?.teams ? findGoogleShift(employeeId,dateIndex) : '';
    const res = await fetch('/api/admin/update-shift',{
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body:JSON.stringify({employeeId,dateIndex,newShift,googleShift})
    }).then(r=>r.json());
    setSaving(false);
    if (!res.success) alert(res.error||'Update failed');
    load();
  }

  function findGoogleShift(employeeId:string, dateIndex:number) {
    if (!google) return '';
    for (const team of Object.keys(google.teams)) {
      const emp = google.teams[team].find((e:any)=>e.id===employeeId);
      if (emp) return emp.schedule[dateIndex] || '';
    }
    return '';
  }

  // Build filtered teams structure
  const filteredTeams = useMemo(()=>{
    if (!data?.teams) return {};
    const term = search.trim().toLowerCase();
    const result: Record<string, any[]> = {};
    Object.entries<any[]>(data.teams).forEach(([teamName, employees])=>{
      if (selectedTeams.length && !selectedTeams.includes(teamName)) return;
      const filtered = !term
        ? employees
        : employees.filter(e =>
            e.name.toLowerCase().includes(term) ||
            e.id.toLowerCase().includes(term)
          );
      if (filtered.length) result[teamName] = filtered;
    });
    return result;
  },[data, search, selectedTeams]);

  const teamNames = useMemo(()=> data?.teams ? Object.keys(data.teams) : [], [data]);

  function toggleTeam(t:string) {
    setSelectedTeams(prev => prev.includes(t) ? prev.filter(x=>x!==t) : [...prev, t]);
  }

  function clearFilters() {
    setSearch('');
    setSelectedTeams([]);
  }

  return (
    <div id={id} className="tab-pane admin-data-tab">
      <div className="admin-data-header">
        <div>
          <h2>Admin Data (Editable)</h2>
          <p className="subtitle">Modify shifts here. Differences from Google represent authorized changes.</p>
        </div>
        <div className="header-actions">
          <button className="btn small" onClick={load} disabled={loading}>üîÑ {loading ? 'Loading...' : 'Refresh'}</button>
          {saving && <span className="saving-indicator">Saving...</span>}
        </div>
      </div>

      {/* Filter Bar */}
      <div className="filter-bar">
        <div className="filter-left">
          <div className="filter-field">
            <label>Search Employee</label>
            <input
              placeholder="Name or ID..."
              value={search}
              onChange={e=>setSearch(e.target.value)}
            />
          </div>

          <div className="filter-field">
            <label>View Mode</label>
            <div className="toggle-group">
              <button
                className={`tgl ${viewMode==='month'?'active':''}`}
                onClick={()=>setViewMode('month')}
              >Month</button>
              <button
                className={`tgl ${viewMode==='day'?'active':''}`}
                onClick={()=>setViewMode('day')}
              >Day</button>
            </div>
          </div>

          {viewMode==='day' && (
            <div className="filter-field">
              <label>Day</label>
              <select value={dayIndex} onChange={e=>setDayIndex(parseInt(e.target.value,10))}>
                {data?.headers?.map((h:string,i:number)=>(
                  <option key={h} value={i}>{h}</option>
                ))}
              </select>
            </div>
          )}
        </div>

        <div className="filter-right">
          <div className="team-chips">
            {teamNames.map(t=>(
              <button
                key={t}
                className={`team-chip ${selectedTeams.includes(t) ? 'active':''}`}
                onClick={()=>toggleTeam(t)}
                title={`Toggle ${t}`}
              >
                {t}
              </button>
            ))}
          </div>
          <div className="filter-actions">
            <button className="btn tiny" onClick={clearFilters}>Clear Filters</button>
          </div>
        </div>
      </div>

      <div className="filter-summary">
        Showing {Object.values(filteredTeams).reduce((acc, arr)=> acc+arr.length,0)} employees
        {search && <> ‚Ä¢ search: ‚Äú{search}‚Äù</>}
        {selectedTeams.length>0 && <> ‚Ä¢ teams: {selectedTeams.join(', ')}</>}
      </div>

      {loading && <div className="inline-loading">Loading admin data...</div>}

      {data && (
        <RosterTable
          headers={data.headers}
          teams={filteredTeams}
          editable={true}
          onUpdateShift={updateShift}
          viewMode={viewMode}
          dayIndex={dayIndex}
          shiftCodes={ALL_SHIFT_CODES}
        />
      )}

      <div className="note-box" style={{marginTop:24}}>
        Click a shift cell to edit. Valid codes: {ALL_SHIFT_CODES.filter(Boolean).join(', ')}.
      </div>

      <style jsx>{`
        .admin-data-header {
          display:flex;
          align-items:flex-start;
          justify-content:space-between;
          gap:24px;
          flex-wrap:wrap;
          margin-bottom:14px;
        }
        .header-actions { display:flex; gap:12px; align-items:center; }
        .filter-bar {
          display:flex;
          flex-wrap:wrap;
          gap:24px;
          background:#16202B;
          padding:18px 20px 14px;
          border:1px solid #243240;
          border-radius:14px;
          margin-bottom:18px;
        }
        .filter-left {
          display:flex;
          gap:24px;
          flex-wrap:wrap;
          align-items:flex-end;
        }
        .filter-right {
          display:flex;
          flex:1;
          min-width:280px;
          flex-direction:column;
          gap:12px;
        }
        .filter-field {
          display:flex;
          flex-direction:column;
          gap:6px;
          min-width:160px;
        }
        .filter-field label {
          font-size:.6rem;
          letter-spacing:1px;
          text-transform:uppercase;
          color:#7F96AC;
          font-weight:600;
        }
        .filter-field input, .filter-field select {
          background:#101923;
          border:1px solid #2A3947;
          border-radius:10px;
          padding:8px 12px;
          color:#D5E1EC;
          font-size:.8rem;
          outline:none;
        }
        .filter-field input:focus, .filter-field select:focus {
          border-color:#4A7BD0;
          box-shadow:0 0 0 2px rgba(74,123,208,.25);
        }
        .toggle-group {
          display:inline-flex;
          background:#121C26;
          padding:4px;
          border:1px solid #2A3947;
          border-radius:10px;
          gap:4px;
        }
        .toggle-group .tgl {
          background:transparent;
          border:0;
          padding:6px 12px;
          font-size:.65rem;
          letter-spacing:.5px;
          font-weight:600;
          color:#95AEC6;
          border-radius:8px;
          cursor:pointer;
          transition:.18s;
        }
        .toggle-group .tgl.active {
          background:#30527A;
          color:#fff;
          box-shadow:0 0 0 1px #4A7BD0;
        }
        .team-chips {
          display:flex;
          flex-wrap:wrap;
          gap:6px;
        }
        .team-chip {
          padding:6px 12px;
          font-size:.62rem;
          background:#1A2531;
          border:1px solid #2A3746;
          color:#C3D2DD;
          border-radius:18px;
          cursor:pointer;
          letter-spacing:.4px;
          transition:.18s;
        }
        .team-chip.active {
          background:#2D527A;
          border-color:#4A7BD0;
          color:#fff;
          box-shadow:0 0 0 1px #4A7BD0;
        }
        .filter-actions { display:flex; align-items:flex-start; }
        .filter-summary {
          font-size:.65rem;
          letter-spacing:.4px;
          color:#90A7BC;
          margin-bottom:10px;
        }
      `}</style>
    </div>
  );
}